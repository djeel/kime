import{aj as T}from"./index-BfZ5KBQI.js";const u=new Map,y="kime:stats-cache";if(typeof window<"u")try{const t=sessionStorage.getItem(y);if(t){const e=JSON.parse(t),r=Date.now();Object.entries(e).forEach(([a,o])=>{o.expires>r&&u.set(a,o)})}}catch{}const q=3e4;function S(t){const e=u.get(t);if(e){if(Date.now()>e.expires){u.delete(t);return}return e.data}}function p(t,e,r=q){if(u.set(t,{data:e,expires:Date.now()+r}),typeof window<"u")try{const a=Date.now(),o={};u.forEach((s,d)=>{s.expires>a&&(o[d]=s)}),sessionStorage.setItem(y,JSON.stringify(o))}catch{}}async function j(t,e,r=7){const a=`progress:${e}:${r}`,o=S(a);if(o)return o;const s=new Date,d=new Date(s);d.setDate(s.getDate()-(s.getDay()+6)%7);const D=d.toISOString(),k=new Date(s);k.setDate(s.getDate()-28);const[v,b,O,W]=await Promise.all([t.from("workout_sessions").select("duration_min, started_at").eq("user_id",e).gte("started_at",D),t.from("streaks").select("current_streak,best_streak").eq("user_id",e).maybeSingle(),t.from("workout_sessions").select("duration_min, started_at").eq("user_id",e).gte("started_at",k.toISOString()),t.from("activity_feed").select("type, payload, created_at").eq("user_id",e).in("type",["badge","streak"]).order("created_at",{ascending:!1}).limit(6)]),w=v.data||[],f=w.length,l=w.reduce((c,m)=>c+(m.duration_min||0),0),i=b.data,$={workoutsCompleted:f,workoutsTarget:r,totalMinutes:l,currentStreak:(i==null?void 0:i.current_streak)||0,longestStreak:(i==null?void 0:i.best_streak)||0},h=O.data||[],n={0:{minutes:0,workouts:0},1:{minutes:0,workouts:0},2:{minutes:0,workouts:0},3:{minutes:0,workouts:0}};h.forEach(c=>{const m=Math.floor((s.getTime()-new Date(c.started_at).getTime())/864e5),g=Math.min(3,Math.floor(m/7));n[g].minutes+=c.duration_min||0,n[g].workouts+=1});const M=[{week:"Week 4",minutes:n[3].minutes,workouts:n[3].workouts},{week:"Week 3",minutes:n[2].minutes,workouts:n[2].workouts},{week:"Week 2",minutes:n[1].minutes,workouts:n[1].workouts},{week:"Week 1",minutes:n[0].minutes,workouts:n[0].workouts}],x=(W.data||[]).map(c=>{var m;return{title:c.type==="streak"?"Streak":((m=c.payload)==null?void 0:m.name)||"Achievement",description:c.type==="streak"?"Streak milestone":"Badge unlocked",date:new Date(c.created_at).toISOString().slice(0,10),earned:!0}}),E=[{metric:"Longest Streak",value:`${(i==null?void 0:i.best_streak)||0} days`,improvement:""},{metric:"Total minutes (this week)",value:`${l} min`,improvement:""},{metric:"Workouts (this week)",value:`${f}`,improvement:""},{metric:"Sessions/month",value:`${h.length}`,improvement:""}],_={weekly:$,monthly:M,achievements:x,personalBests:E};return p(a,_),_}async function A(t,e){const r=`streak:${e}`,a=S(r);if(a)return a;const o=await T(t,e),s={days:o.current,best:o.best};return p(r,s,15e3),s}export{j as fetchProgressData,A as fetchStreakOnly};
